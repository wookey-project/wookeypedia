.. _buildprocedure:

Install and build procedure
===========================

.. contents::

Build the project
-----------------

In the root directory::

   $ make defconfig_list
   $ make <defconfig_file>
   $ make

When giving the defconfig file as argument, the project is configured using this file.

.. hint::
   You can use the *menuconfig* target if you wish to modify the current configuration

.. warning::
   When customizing the configure file (with *menuconfig* for instance), beware of the possible inconsistencies leading
   to non-working configurations!

Using the default target you can build the project with **make**.

The project is built in the directory set by CONFIG_BUILD_DIR in .config, in the ARCH/BOARD subdir.
For example, when choosing the 32f407discovery board in the menuconfig, the project is built in
*CONFIG_BUILD_DIR*/armv7-m/32f407discovery/. The doc are also generated in this directory.
This allows to build different configurations in different directories and keep multiple build contexts
without issues.

The menuconfig supports the search of keywords and informational descriptions for each option, see
the integrated command help for more information. The global behavior of the menuconfig is the
same as for the Linux kernel or the U-Boot one.

If you do not want to create your configuration from scratch, there is default configs in configs
dir. They can be set by calling them by their relative path, as listed in the
defconfig_list target, like for e.g.::

   $ make boards/32f407disco/configs/disco_blinky_ipc_ada_defconfig

.. warning::
   It is unwise to start a configuration from scratch, as there are a lot of possible options. It is
   easier to start from an existing defconfig file

This will set a .config file and generate the corresponding header files. The menuconfig is then no
more needed. You can still use it to update the config file generated by the defconfig.

The build system internals
--------------------------

The WooKey build system is based on Makefiles and Kconfig. It requires GNU Make syntax.

Global Makefile hierarchy
^^^^^^^^^^^^^^^^^^^^^^^^^

Here is a list of the Makefiles in the project:

   * ./Makefile, manages the overall project build and the build dependencies at the project level
   * ./apps/Makefile, manages the build of the various applications, depending on the configuration (see Kconfig section)
   * ./apps/_appname_/Makefile, manages a given app build
   * ./drivers/Makefile, manages the drivers build
   * ./libs/Makefile, manages the libraries build
   * ./external/Makefile, manages the external projects build
   * ./doc/Makefile, builds the documentation

Other Makefiles (.objs, .conf, .gen) are included in theses Makefiles.

Integrating the Configuration set in Kconfig
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The configuration generated (through menuconfig) is hosted in the .config file. This file is
sourced and its variables are cleaned by the ./Makefile.conf file. This Makefile also creates a minimal
configuration to support some targets when no .config file exists. This file can be hosted from any
Makefile in the project while the variable PROJ\_FILES exists and targets the project root directory.

Some targets are common to all apps (clean, distclean, all etc.) and are therefore hosted in the
root Makefile.gen (for generic) file. This file can be hosted from any Makefile in the project while
the variable PROJ\_FILES exists and targets the project root directory.

The pretty-printing build system
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Most of the build commands are executed silently (using classical "CC   ...", "LD    ...", etc.) pretty
printing. This pretty printing is managed using the standard Linux pretty printing support.
The command are called using::

   $(call if_changed,buildcmd)

or::

   $(call cmd,buildcmd)

syntax in the Makefile targets, where:

   * `buildcmd` is the name of the command to execute
   * `if_changed` is the macro to use when the command has to be executed if any requirements have changed
   * `cmd` is the macro to use when the command has to be always executed

The macros are written in Makefile.build file. This is the very same file as the Linux Kernel and
most other files and should not be modified.

The buildcmd is the name of the command, as defined in the Makefile.build file. This file does not have
to be included explicitly, as it is included by Makefile.gen.
The buildcmd corresponds to the command name without the "(quiet\_)\_cmd\_" string.

Here is an example of a classical compilation of object files from source files:::

   %.o:%.c
   	$(call if_changed,cc_o_c)

When building in quiet mode, all commands are written in files named as the target, starting with a dot
and finishing with .cmd. As an illustration, the command used to build helpers.o is written in .helpers.o.cmd,
in the same directory as the object file.

To disable the quiet mode, just pass V=1 to the command line. All commands will be printed in the console.

Makefile.objs and configuration
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In order to support .config-based compilation, the activation of:

   * applications
   * SoC features
   * drivers and peripherals support

is made using Makefile.objs files.

In each Makefile.objs, the corresponding variable (app-y, drv-y, etc.) is filled based on the according
configuration variable set in the .config file.

Here is an example of such a Makefile.objs:

   drv-y := 

   drv-$(CONFIG_DRV_USR_USART) += usart/

Here, drv-y is first set to (null), and then, for each option:

   * If the option is set to y (this means that the corresponding KConfig option is "bool"), the driver dir is
     added to drv-y
   * If the option is set to n, the file is added to drv-n.

All Makefile.objs fulfill their variables. Makefile.gen then includes all Makefile.objs. As said above, this
inclusion can be done from any Makefile including Makefile.gen file, whatever its directory is, while PROJ\_FILES
variable exists.

.. FIXME
As a consequence, applications Makefile can now use the Makefile.objs variables to be built. Only their own sources
(being hosted in apps/_appname_/) are neither managed by Makefile.objs nor by the Kconfig mechanism.

By now, _varname_-n is not used, yet it exists if needed. The applications Makefile only use the _varname_-y var.


